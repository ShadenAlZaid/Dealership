@page "/truck"
@using DealershipLibrary.Vehicle.Trucks
@using DealershipLibrary.Vehicle
@using DealershipLibrary
@using System.Collections.Generic
@using System.ComponentModel.DataAnnotations;
@using Microsoft.Extensions.Logging
@inject ILogger<Truck> Logger

<div>
    <h3>Truck</h3>

    <EditForm Model="@truck" OnValidSubmit="@ValidSubmit">
    <DataAnnotationsValidator/> 
    <ValidationSummary/>

        <select @onchange="(e)=>SelectColor(e.Value.ToString())">
            <option value="">Choose Color</option>
        
            @foreach (var item in ColorsList)
            {
                <option value = "@item">@item</option>
            }
         </select>

         <select @onchange="(e)=>SelectModel(e.Value.ToString())">
            <option value="">Choose Model</option>

            @foreach (var item in ModelsList)            
            {
                <option value = "@item">@item</option>
            }
        </select>

        <button type="submit">Add</button>

    @*<ValidationMessage For="@(()=>truck.VehicleModel)" ></ValidationMessage>*@
    </EditForm>
</div>

@code {
    [Parameter] 
    public EventCallback<IVehicle> OnAdd { get; set; }

    List<string> ModelsList = Extensions.GetEnumItems(typeof(TruckModelsEnum));
    List<string> ColorsList = Extensions.GetEnumItems(typeof(TruckColorsEnum));

    private Truck truck  = new Truck(null,null);
    string msg;

    void SelectColor(string value)
    {
        this.truck.SetColor(value);
    }

    void SelectModel(string value)
    {
        this.truck.SetModel(value);
    }

    void add()
    {
    }

    void ValidSubmit()
    {
        OnAdd.InvokeAsync(truck);
        msg = "Truck Added!";
        Logger.LogInformation("ValidSubmit called");
    }
}
