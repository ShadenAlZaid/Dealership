@page "/"
@using DealershipLibrary.Vehicle.Cars
@using DealershipLibrary
@using System.ComponentModel.DataAnnotations;
@using Microsoft.Extensions.Logging
@inject ILogger<Car> Logger

<h4>Shaden's Dealership</h4> 
<div>
    <div>
        <select id="vehicleType" @onchange="(e)=>SelectVehicle(e.Value.ToString())">
            <option value="">Choose Vehicle</option>

            @foreach (var item in vehicleTypesList)
            {
                <option value="@item">@item</option>
            }
        </select>
    </div>

        @if (type.Name == VehicleTypesEnum.Car.ToString())
        {
            <CarComponent OnAdd="@vehicleAdded"></CarComponent> //Car component
        }  
        else if(type.Name == VehicleTypesEnum.Motorcycle.ToString())
        {
            <MotorcycleComponent OnAdd="vehicleAdded"></MotorcycleComponent> //Motorcycle component 
        }
        else if(type.Name == VehicleTypesEnum.Truck.ToString())
        {
            <TruckComponent OnAdd="vehicleAdded"></TruckComponent> //Truck component        
        } 

        <div>
            <br/>
            <h6><b>Shopping Cart</b></h6>
            @foreach (var v in VehiclesList)
            {
                <ul>@v.VehicleColor.Name.ToString() @v.VehicleModel.Name.ToString()
                <button @onclick="@(() => Remove())">🗙</button></ul>
            }
        </div>
</div>


@code
{
    [Parameter]
    public EventCallback<IVehicle> OnRemove {get; set;}
    List<string> vehicleTypesList = Extensions.GetEnumItems(typeof(VehicleTypesEnum));
    public List<IVehicle> VehiclesList { get; set; } = new List<IVehicle>();

    VehicleType type = new VehicleType(null);

    void SelectVehicle(string value)
    {
        this.type= new VehicleType(value);
    }

    void vehicleAdded(IVehicle vehicle)
    {
        this.VehiclesList.Add(vehicle);
    }

    void Remove()
    {
        VehiclesList.Remove(VehiclesList[0]);
    }

    void ValidSubmit()
    {
        Logger.LogInformation("ValidSubmit called");
    }
}