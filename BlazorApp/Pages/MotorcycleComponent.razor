@page "/motorcycle"
@using DealershipLibrary.Vehicle.Motorcycles
@using DealershipLibrary.Vehicle
@using DealershipLibrary
@using System.Collections.Generic
@using System.ComponentModel.DataAnnotations;
@using Microsoft.Extensions.Logging
@inject ILogger<Motorcycle> Logger

<div>
    <h5>Motorcycle</h5>

    <EditForm Model="@motorcycle" OnValidSubmit="@ValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary/>

         <select @onchange="(e)=>SelectColor(e.Value.ToString())">
            <option value="">Choose Color</option>

            @foreach (var item in mcColorsList)
            {
                <option value = "@item">@item</option>
            }
          </select>

         <select @onchange="(e)=>SelectModel(e.Value.ToString())">
             <option value="">Choose Model</option>

             @foreach (var item in mcModelsList)            
             {
                <option value = "@item">@item</option>
             }
         </select>

        <button type="submit">Add</button>

        <span>  @msg</span>

    @*<ValidationMessage For="@(()=>motorcycle.VehicleModel)" ></ValidationMessage>*@   
    </EditForm>
</div>


@code {
    [Parameter] 
    public EventCallback<IVehicle> OnAdd { get; set; }

    List<string> mcModelsList = Extensions.GetEnumItems(typeof(MCModelsEnum));
    List<string> mcColorsList = Extensions.GetEnumItems(typeof(MCColorsEnum));

    private Motorcycle motorcycle  = new Motorcycle(null,null);
    string msg;

    void SelectColor(string value)
    {
        this.motorcycle.SetColor(value);
    }

    void SelectModel(string value)
    {
        this.motorcycle.SetModel(value);
    }

    void ValidSubmit()
    {
        var newMotorcycle= new Motorcycle(null, null);
        newMotorcycle.Clone(motorcycle);
        motorcycle = new Motorcycle(null, null);
        OnAdd.InvokeAsync(newMotorcycle);    
        msg = "Motorcycle Added!";
        Logger.LogInformation("ValidSubmit called");
    }
}