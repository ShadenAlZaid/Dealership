@page "/motorcycle"
@using DealershipLibrary.Vehicle.Motorcycles
@using DealershipLibrary.Vehicle
@using DealershipLibrary
@using System.Collections.Generic
@using System.ComponentModel.DataAnnotations;
@using Microsoft.Extensions.Logging
@inject ILogger<Motorcycle> Logger

<div>
    <h5>Motorcycle</h5>

    <EditForm Model="@motorcycle" OnValidSubmit="@ValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <select @onchange="(e)=>SelectColor((int)e.Value)">
            <option value="">Choose Color</option>

            @foreach (var item in mcColorsList)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </select>

        <select @onchange="(e)=>SelectModel((int)e.Value)">
            <option value="">Choose Model</option>

            @foreach (var item in mcModelsList)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </select>

        <button type="submit">Add</button>

        <span>       @msg</span>

        @*<ValidationMessage For="@(()=>motorcycle.VehicleModel)" ></ValidationMessage>*@
    </EditForm>
</div>


@code {
    [Inject]
    VehicleService vehicleService { get; set; }

    [Parameter]
    public EventCallback<VehicleDTO> OnAdd { get; set; }

    List<LookupDTO> mcColorsList;
    List<LookupDTO> mcModelsList;

    private VehicleDTO motorcycle = new VehicleDTO(null, null);
    string msg;

    protected override void OnInitialized()
    {
        this.mcColorsList = this.vehicleService.GetColors();
        this.mcModelsList = this.vehicleService.GetModels(VehicleTypesEnum.Motorcycle);
    }

    void SelectColor(int value)
    {
        this.motorcycle.SetColor(value);
    }

    void SelectModel(int value)
    {
        this.motorcycle.SetModel(value);
    }

    void ValidSubmit()
    {
        var newMotorcycle = new VehicleDTO(null, null);
        newMotorcycle.VehicleTypeId = (int)VehicleTypesEnum.Motorcycle;
        newMotorcycle.Clone(motorcycle);

        //reset Motorcycle to null
        motorcycle = new VehicleDTO();
        OnAdd.InvokeAsync(newMotorcycle);
        msg = "Motorcycle Added!";
        Logger.LogInformation("ValidSubmit called");
    }
}