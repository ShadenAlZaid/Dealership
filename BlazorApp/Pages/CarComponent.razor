@page "/car"
@using DealershipLibrary.Vehicle
@using DealershipLibrary.Vehicle.Cars
@using DealershipLibrary
@using System.Collections.Generic
@using System.ComponentModel.DataAnnotations;
@using Microsoft.Extensions.Logging
@inject ILogger<Car> Logger

<div>
    <h5>Car</h5>

    <EditForm Model="@car" OnValidSubmit="@ValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <select @onchange="(e)=>SelectColor(e.Value?.ToString())">
            <option value="">Choose Color</option>

            @foreach (var item in carColorsList)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </select>

        <select @onchange="(e)=>SelectModel(e.Value.ToString())">
            <option value="">Choose Model</option>

            @foreach (var item in carModelsList)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </select>
        <button type="submit">Add</button>
        @*<p>@car.GetType().Name Added!</p>*@

        <span>   @msg</span>

        @*<ValidationMessage For="@(()=>car.VehicleModel)"></ValidationMessage>
            <ValidationMessage For="@(()=>car.VehicleColor)"></ValidationMessage>*@
    </EditForm>
</div>


@code {
    [Inject]
    VehicleService vehicleService { get; set; }

    [Parameter]
    public EventCallback<VehicleDTO> OnAdd { get; set; }

    private VehicleDTO car = new VehicleDTO(null, null);
    string msg;

    List<LookupDTO> carColorsList;
    List<LookupDTO> carModelsList;

    protected override void OnInitialized()
    {
        this.carColorsList = this.vehicleService.GetColors();
        this.carModelsList = this.vehicleService.GetModels(VehicleTypesEnum.Car);
    }

    void SelectColor(string value)
    {
        this.car.SetColor(value);
    }

    void SelectModel(string value)
    {
        this.car.SetModel(value);
    }

    void ValidSubmit()
    {
        var newCar = new VehicleDTO(null, null);
        newCar.VehicleTypeId = (int)VehicleTypesEnum.Car;
        newCar.Clone(car);

        //reset car to null
        car = new VehicleDTO();
        OnAdd.InvokeAsync(newCar);
        msg = "Car Added!";
        Logger.LogInformation("ValidSubmit called");
    }
}