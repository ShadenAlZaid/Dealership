@page "/car"
@using DealershipLibrary.Vehicle
@using DealershipLibrary.Vehicle.Cars
@using DealershipLibrary
@using System.Collections.Generic
@using System.ComponentModel.DataAnnotations;
@using Microsoft.Extensions.Logging
@inject ILogger<Car> Logger

<div>
    <h3>Car</h3>

    <EditForm Model="@car" OnValidSubmit="@ValidSubmit">
        <DataAnnotationsValidator/>

        <select @onchange="(e)=>SelectColor(e.Value.ToString())">
            <option value="">Choose Color</option>

            @foreach (var item in carColorsList)
            {
                <option value="@item">@item</option>
            }
        </select>
        <select @onchange="(e)=>SelectModel(e.Value.ToString())">
            <option value="">Choose Model</option>

            @foreach (var item in carModelsList)
            {
                <option value="@item">@item</option>
            }
        </select>        
        <button @onclick="@(() => add())">Add</button>

    <ValidationMessage For="@(()=>car.VehicleModel)" ></ValidationMessage>
    </EditForm>
</div>


@code {
    [Parameter]
    public EventCallback<IVehicle> OnAdd {get; set;}

    List<string> carModelsList = Extensions.GetEnumItems(typeof(CarModelsEnum));
    List<string> carColorsList = Extensions.GetEnumItems(typeof(CarColorsEnum));

    private Car car  = new Car(null,null);

    void SelectColor(string value)
    {
        this.car.SetColor(value);
    }

    void SelectModel(string value)
    {
        this.car.SetModel(value);
    }

    void add()
    {
        OnAdd.InvokeAsync(car);
    }

    void ValidSubmit()
    {
        add();
        Logger.LogInformation("ValidSubmit called");
    }
}